<?xml version="1.0" encoding="UTF-8"?>
<project default="all" name="bananiser" xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="jar.dir" value="target" />
	<property name="jar.file" value="${jar.dir}/${ant.project.name}.jar" />
	<property name="main.src.dir" value="src" />
	<property name="main.bin.dir" value="${jar.dir}/bin" />
	<property name="test.src.dir" value="test" />
	<property name="test.bin.dir" value="${jar.dir}/test" />
	<property name="deps.dir" value="deps" />

	<path id="compile.path">
		<fileset dir="${deps.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="init">
		<delete file="${jar.name}" />
		<delete dir="${jar.dir}" />
		<mkdir dir="${jar.dir}" />
		<mkdir dir="${main.bin.dir}" />
		<mkdir dir="${test.bin.dir}" />
	</target>

	<target name="resolve" depends="init">
		<ivy:retrieve pattern="deps/[organisation]-[artifact]-[revision].[type]" />
	</target>

	<target name="compile" depends="resolve">
		<javac classpathref="compile.path" debug="true" destdir="${main.bin.dir}" includeantruntime="false">
			<src path="${main.src.dir}" />
		</javac>
	</target>

	<target name="test" depends="compile">
		<javac debug="true" destdir="${test.bin.dir}" includeantruntime="false">
			<classpath>
				<path refid="compile.path" />
				<dirset dir="${main.bin.dir}" />
			</classpath>
			<src path="${test.src.dir}" />
		</javac>

		<junit showoutput="true" printsummary="yes" haltonfailure="true" fork="true" forkmode="once">
			<formatter type="plain" />
			<classpath>
				<path refid="compile.path" />
				<dirset dir="${main.bin.dir}" />
				<dirset dir="${test.bin.dir}" />
			</classpath>
			<batchtest todir="${jar.dir}">
				<fileset dir="${test.bin.dir}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="pack">
		<jar destfile="${jar.file}">
			<zipgroupfileset dir="${deps.dir}" includes="*.jar" />
			<fileset dir="${main.bin.dir}">
				<include name="**/*" />
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="com.soundcloud.bananiser.Bananise" />
			</manifest>
		</jar>
	</target>

	<target name="functional-test" depends="pack">
		<run-bananised-tool utility="Cat" description="Text->Text" input-file="${test.src.dir}/testdata.log" output-file="${test.bin.dir}/test-output1" />
		<run-bananised-tool utility="Cat" description="Text->Seq" input-file="${test.bin.dir}/test-output1/part-r-00000" output-file="${test.bin.dir}/test-output2" compressed="--compressedOutput" />
		<run-bananised-tool utility="Cat" description="Seq->Seq" input-file="${test.bin.dir}/test-output2/part-r-00000" output-file="${test.bin.dir}/test-output3" compressed="--compressedOutput  --compressedInput" />
		<run-bananised-tool utility="Cat" description="Seq->Text" input-file="${test.bin.dir}/test-output3/part-r-00000" output-file="${test.bin.dir}/test-output4" compressed="--compressedInput" />

		<diff description="Text==Text" one="${test.src.dir}/testdata.log" another="${test.bin.dir}/test-output1/part-r-00000" />
		<diff description="Text==Text" one="${test.src.dir}/testdata.log" another="${test.bin.dir}/test-output4/part-r-00000" />
	</target>

	<macrodef name="run-bananised-tool">
		<attribute name="utility" />
		<attribute name="description" />
		<attribute name="compressed" default="" />
		<attribute name="input-file" />
		<attribute name="output-file" />
		<sequential>
			<echo message="================================ Test: @{utility} @{description}" />
			<exec executable="lib/hadoop/bin/hadoop" failonerror="true">
				<arg line="jar ${jar.file} @{utility} @{compressed} --input @{input-file}  --output @{output-file} -fs file://." />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="diff">
		<attribute name="description" />
		<attribute name="one" />
		<attribute name="another" />
		<sequential>
			<echo message="================================ Test: @{description}" />
			<exec executable="diff" failonerror="true">
				<arg line="@{one}" />
				<arg line="@{another}" />
			</exec>
		</sequential>
	</macrodef>

	<target name="all" depends="compile, test,pack, functional-test" />
</project>
